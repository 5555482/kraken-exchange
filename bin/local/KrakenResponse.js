// Generated by CoffeeScript 2.0.0-beta2
(function() {
  var KrakenResponse, Property;

  Property = require('./Property');

  KrakenResponse = (function() {
    class KrakenResponse extends Property {
      constructor(response) {
        var result;
        super();
        result = JSON.parse(response);
        if (result.error.length) {
          console.log('LENGTH', result.error.length);
          console.log('TYPE', typeof result.error[0]);
          console.log(result.error);
          process.exit();
        }
        if (result.error.length) {
          throw new Error(result.error[0]);
        }
        this._result = result.result;
      }

      float() {
        var key, ref, val;
        ref = this.result;
        for (key in ref) {
          val = ref[key];
          this.result[key] = parseFloat(val);
        }
        return this;
      }

      fixup(item) {
        var key, obj, val;
        if (item !== Object(item)) {
          return item;
        }
        obj = {};
        for (key in item) {
          val = item[key];
          key = key.replace(/^[XZ]([A-Z]{3})/, '$1').replace(/[XZ]([A-Z]{3})$/, '$1');
          obj[key] = (function() {
            switch (key) {
              case 'asset':
              case 'base':
              case 'quote':
                return val.replace(/^[XZ]([A-Z]{3})$/, '$1');
              case 'pair':
                return val.replace(/^[XZ]([A-Z]{3})/, '$1').replace(/[XZ]([A-Z]{3})$/, '$1');
              default:
                return this.fixup(val);
            }
          }).call(this);
        }
        return obj;
      }

    };

    KrakenResponse.property('result', {
      get: function() {
        return this.fixup(this._result);
      }
    });

    return KrakenResponse;

  })();

  module.exports = KrakenResponse;

}).call(this);
